import os
import logging
from flask import Flask, request
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ConversationHandler, MessageHandler, ContextTypes, filters
)
from config import TELEGRAM_BOT_TOKEN, ADMIN_ID

# FSM —Å—Ç–∞–Ω–∏
ASK_PHONE, ASK_QUESTION = range(2)
banned_users = set()

# Flask –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è Webhook
flask_app = Flask(__name__)
app = None  # Telegram Application

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id in banned_users:
        return

    keyboard = [
        [InlineKeyboardButton("–í–∞–∫–∞–Ω—Å—ñ—ó WORK.UA", url="https://www.work.ua/jobs/by-company/2620784/#jobs")],
        [InlineKeyboardButton("–í–∞–∫–∞–Ω—Å—ñ—ó ROBOTA.UA", url="https://robota.ua/company14232568")],
        [InlineKeyboardButton("–ó–≤'—è–∑–∞—Ç–∏—Å—è —ñ–∑ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º", callback_data="recruiter")],
        [InlineKeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è", callback_data="relation")]
    ]

    text = (
        "–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç 46 –æ–∫—Ä–µ–º–æ—ó –∞–µ—Ä–æ–º–æ–±—ñ–ª—å–Ω–æ—ó –±—Ä–∏–≥–∞–¥–∏.\n"
        "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –¥–æ –Ω–∞—Å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏—Å—è –∞–±–æ –º–æ–±—ñ–ª—ñ–∑—É–≤–∞—Ç–∏—Å—è, –æ–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –¥—ñ—é:"
    )
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# –ö–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user

    if user.id in banned_users:
        return

    context.user_data["contact_reason"] = (
        "–ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è —ñ–∑ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º" if query.data == "recruiter" else "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è"
    )
    await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üì±")
    return ASK_PHONE

# –í–≤—ñ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω—É
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–î—è–∫—É—é! –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üìù")
    return ASK_QUESTION

# –í–≤—ñ–¥ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
async def finish_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = update.message.text
    phone = context.user_data.get("phone", "–ù–µ–≤—ñ–¥–æ–º–æ")
    reason = context.user_data.get("contact_reason", "–ù–µ–≤—ñ–¥–æ–º–æ")

    user = update.effective_user
    chat_link = f"tg://user?id={user.id}"

    msg = (
        f"üì• <b>{reason}</b>\n"
        f"üë§ <a href='{chat_link}'>{user.full_name}</a> (@{user.username})\n"
        f"‚òéÔ∏è –ù–æ–º–µ—Ä: <code>{phone}</code>\n"
        f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {question}"
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode='HTML')
    await update.message.reply_text("–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# Webhook endpoint
@flask_app.post("/")
async def webhook():
    update = Update.de_json(request.get_json(force=True), app.bot)
    await app.update_queue.put(update)
    return "ok"

def main():
    global app
    BOT_URL = os.getenv("RENDER_EXTERNAL_URL")  # Render –∑–º—ñ–Ω–Ω–∞

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^(recruiter|relation)$")],
        states={
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question)],
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_contact)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        webhook_url=f"{BOT_URL}/"
    )

if __name__ == "__main__":
    main()
